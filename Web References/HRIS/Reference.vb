'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace HRIS
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="svcHRISSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class svcHRIS
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetEmployeeNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEmployeeInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddNewEmployeeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateEmployeeInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteEmployeeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRPTEmpDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLatestEMPDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLatestEMPPositionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEmpDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddNewEmpDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateEmpDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteEmpDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLatestEMPPostOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRPTEmpPositionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteEMPPositionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateEMPPositionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddNewEMPPositionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEMPPositionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRPTEmpSalaryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteEMPSalaryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateEMPSalaryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddNewEMPSalaryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEMPSalaryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLatestEMPSalaryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteHRPositionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateHRPositionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddNewHRPositionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetHRPositionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRPTEmpNoteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteEMPNoteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateEMPNoteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddNewEMPNoteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEMPNoteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEMPNoteDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLatestEMPNoteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = "http://localhost/KatalaWebServices/svcHRIS.Asmx"
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetEmployeeNameCompleted As GetEmployeeNameCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEmployeeInfoCompleted As GetEmployeeInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event AddNewEmployeeCompleted As AddNewEmployeeCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateEmployeeInfoCompleted As UpdateEmployeeInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteEmployeeCompleted As DeleteEmployeeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRPTEmpDetailCompleted As GetRPTEmpDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLatestEMPDetailCompleted As GetLatestEMPDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLatestEMPPositionCompleted As GetLatestEMPPositionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEmpDetailCompleted As GetEmpDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event AddNewEmpDetailCompleted As AddNewEmpDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateEmpDetailCompleted As UpdateEmpDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteEmpDetailCompleted As DeleteEmpDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLatestEMPPostCompleted As GetLatestEMPPostCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRPTEmpPositionCompleted As GetRPTEmpPositionCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteEMPPositionCompleted As DeleteEMPPositionCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateEMPPositionCompleted As UpdateEMPPositionCompletedEventHandler
        
        '''<remarks/>
        Public Event AddNewEMPPositionCompleted As AddNewEMPPositionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEMPPositionCompleted As GetEMPPositionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRPTEmpSalaryCompleted As GetRPTEmpSalaryCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteEMPSalaryCompleted As DeleteEMPSalaryCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateEMPSalaryCompleted As UpdateEMPSalaryCompletedEventHandler
        
        '''<remarks/>
        Public Event AddNewEMPSalaryCompleted As AddNewEMPSalaryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEMPSalaryCompleted As GetEMPSalaryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLatestEMPSalaryCompleted As GetLatestEMPSalaryCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteHRPositionCompleted As DeleteHRPositionCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateHRPositionCompleted As UpdateHRPositionCompletedEventHandler
        
        '''<remarks/>
        Public Event AddNewHRPositionCompleted As AddNewHRPositionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetHRPositionCompleted As GetHRPositionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRPTEmpNoteCompleted As GetRPTEmpNoteCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteEMPNoteCompleted As DeleteEMPNoteCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateEMPNoteCompleted As UpdateEMPNoteCompletedEventHandler
        
        '''<remarks/>
        Public Event AddNewEMPNoteCompleted As AddNewEMPNoteCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEMPNoteCompleted As GetEMPNoteCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEMPNoteDateCompleted As GetEMPNoteDateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLatestEMPNoteCompleted As GetLatestEMPNoteCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEmployeeName", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEmployeeName(ByVal strEmployeeId As String, ByVal strAPP_ID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetEmployeeName", New Object() {strEmployeeId, strAPP_ID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetEmployeeName(ByVal strEmployeeId As String, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetEmployeeName", New Object() {strEmployeeId, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetEmployeeName(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEmployeeNameAsync(ByVal strEmployeeId As String, ByVal strAPP_ID As String)
            Me.GetEmployeeNameAsync(strEmployeeId, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEmployeeNameAsync(ByVal strEmployeeId As String, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.GetEmployeeNameOperationCompleted Is Nothing) Then
                Me.GetEmployeeNameOperationCompleted = AddressOf Me.OnGetEmployeeNameOperationCompleted
            End If
            Me.InvokeAsync("GetEmployeeName", New Object() {strEmployeeId, strAPP_ID}, Me.GetEmployeeNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEmployeeNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEmployeeNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEmployeeNameCompleted(Me, New GetEmployeeNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEmployeeInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEmployeeInfo(ByVal strEmployeeId As String, ByVal strEmployeeName As String, ByVal strAPP_ID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetEmployeeInfo", New Object() {strEmployeeId, strEmployeeName, strAPP_ID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetEmployeeInfo(ByVal strEmployeeId As String, ByVal strEmployeeName As String, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetEmployeeInfo", New Object() {strEmployeeId, strEmployeeName, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetEmployeeInfo(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEmployeeInfoAsync(ByVal strEmployeeId As String, ByVal strEmployeeName As String, ByVal strAPP_ID As String)
            Me.GetEmployeeInfoAsync(strEmployeeId, strEmployeeName, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEmployeeInfoAsync(ByVal strEmployeeId As String, ByVal strEmployeeName As String, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.GetEmployeeInfoOperationCompleted Is Nothing) Then
                Me.GetEmployeeInfoOperationCompleted = AddressOf Me.OnGetEmployeeInfoOperationCompleted
            End If
            Me.InvokeAsync("GetEmployeeInfo", New Object() {strEmployeeId, strEmployeeName, strAPP_ID}, Me.GetEmployeeInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEmployeeInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEmployeeInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEmployeeInfoCompleted(Me, New GetEmployeeInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddNewEmployee", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddNewEmployee(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String) As String
            Dim results() As Object = Me.Invoke("AddNewEmployee", New Object() {adoDS, strAPP_ID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginAddNewEmployee(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AddNewEmployee", New Object() {adoDS, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAddNewEmployee(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddNewEmployeeAsync(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String)
            Me.AddNewEmployeeAsync(adoDS, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddNewEmployeeAsync(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.AddNewEmployeeOperationCompleted Is Nothing) Then
                Me.AddNewEmployeeOperationCompleted = AddressOf Me.OnAddNewEmployeeOperationCompleted
            End If
            Me.InvokeAsync("AddNewEmployee", New Object() {adoDS, strAPP_ID}, Me.AddNewEmployeeOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddNewEmployeeOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddNewEmployeeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddNewEmployeeCompleted(Me, New AddNewEmployeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateEmployeeInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateEmployeeInfo(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String)
            Me.Invoke("UpdateEmployeeInfo", New Object() {adoDS, strAPP_ID})
        End Sub
        
        '''<remarks/>
        Public Function BeginUpdateEmployeeInfo(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateEmployeeInfo", New Object() {adoDS, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndUpdateEmployeeInfo(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateEmployeeInfoAsync(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String)
            Me.UpdateEmployeeInfoAsync(adoDS, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateEmployeeInfoAsync(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.UpdateEmployeeInfoOperationCompleted Is Nothing) Then
                Me.UpdateEmployeeInfoOperationCompleted = AddressOf Me.OnUpdateEmployeeInfoOperationCompleted
            End If
            Me.InvokeAsync("UpdateEmployeeInfo", New Object() {adoDS, strAPP_ID}, Me.UpdateEmployeeInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateEmployeeInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateEmployeeInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateEmployeeInfoCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteEmployee", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteEmployee(ByVal strEmpId As String, ByVal strAPP_ID As String) As String
            Dim results() As Object = Me.Invoke("DeleteEmployee", New Object() {strEmpId, strAPP_ID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginDeleteEmployee(ByVal strEmpId As String, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeleteEmployee", New Object() {strEmpId, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDeleteEmployee(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteEmployeeAsync(ByVal strEmpId As String, ByVal strAPP_ID As String)
            Me.DeleteEmployeeAsync(strEmpId, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteEmployeeAsync(ByVal strEmpId As String, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.DeleteEmployeeOperationCompleted Is Nothing) Then
                Me.DeleteEmployeeOperationCompleted = AddressOf Me.OnDeleteEmployeeOperationCompleted
            End If
            Me.InvokeAsync("DeleteEmployee", New Object() {strEmpId, strAPP_ID}, Me.DeleteEmployeeOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteEmployeeOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteEmployeeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteEmployeeCompleted(Me, New DeleteEmployeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRPTEmpDetail", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRPTEmpDetail(ByVal strEmployeeId As String, ByVal strHistory As String, ByVal strAPP_ID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetRPTEmpDetail", New Object() {strEmployeeId, strHistory, strAPP_ID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetRPTEmpDetail(ByVal strEmployeeId As String, ByVal strHistory As String, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetRPTEmpDetail", New Object() {strEmployeeId, strHistory, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetRPTEmpDetail(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRPTEmpDetailAsync(ByVal strEmployeeId As String, ByVal strHistory As String, ByVal strAPP_ID As String)
            Me.GetRPTEmpDetailAsync(strEmployeeId, strHistory, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRPTEmpDetailAsync(ByVal strEmployeeId As String, ByVal strHistory As String, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.GetRPTEmpDetailOperationCompleted Is Nothing) Then
                Me.GetRPTEmpDetailOperationCompleted = AddressOf Me.OnGetRPTEmpDetailOperationCompleted
            End If
            Me.InvokeAsync("GetRPTEmpDetail", New Object() {strEmployeeId, strHistory, strAPP_ID}, Me.GetRPTEmpDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRPTEmpDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRPTEmpDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRPTEmpDetailCompleted(Me, New GetRPTEmpDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLatestEMPDetail", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLatestEMPDetail(ByVal strEmployeeId As String, ByVal strAPP_ID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetLatestEMPDetail", New Object() {strEmployeeId, strAPP_ID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetLatestEMPDetail(ByVal strEmployeeId As String, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetLatestEMPDetail", New Object() {strEmployeeId, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetLatestEMPDetail(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLatestEMPDetailAsync(ByVal strEmployeeId As String, ByVal strAPP_ID As String)
            Me.GetLatestEMPDetailAsync(strEmployeeId, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLatestEMPDetailAsync(ByVal strEmployeeId As String, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.GetLatestEMPDetailOperationCompleted Is Nothing) Then
                Me.GetLatestEMPDetailOperationCompleted = AddressOf Me.OnGetLatestEMPDetailOperationCompleted
            End If
            Me.InvokeAsync("GetLatestEMPDetail", New Object() {strEmployeeId, strAPP_ID}, Me.GetLatestEMPDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLatestEMPDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLatestEMPDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLatestEMPDetailCompleted(Me, New GetLatestEMPDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLatestEMPPosition", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLatestEMPPosition(ByVal strEmployeeId As String, ByVal strAPP_ID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetLatestEMPPosition", New Object() {strEmployeeId, strAPP_ID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetLatestEMPPosition(ByVal strEmployeeId As String, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetLatestEMPPosition", New Object() {strEmployeeId, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetLatestEMPPosition(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLatestEMPPositionAsync(ByVal strEmployeeId As String, ByVal strAPP_ID As String)
            Me.GetLatestEMPPositionAsync(strEmployeeId, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLatestEMPPositionAsync(ByVal strEmployeeId As String, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.GetLatestEMPPositionOperationCompleted Is Nothing) Then
                Me.GetLatestEMPPositionOperationCompleted = AddressOf Me.OnGetLatestEMPPositionOperationCompleted
            End If
            Me.InvokeAsync("GetLatestEMPPosition", New Object() {strEmployeeId, strAPP_ID}, Me.GetLatestEMPPositionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLatestEMPPositionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLatestEMPPositionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLatestEMPPositionCompleted(Me, New GetLatestEMPPositionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEmpDetail", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEmpDetail(ByVal strEmployeeId As String, ByVal strRecordId As String, ByVal strAPP_ID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetEmpDetail", New Object() {strEmployeeId, strRecordId, strAPP_ID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetEmpDetail(ByVal strEmployeeId As String, ByVal strRecordId As String, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetEmpDetail", New Object() {strEmployeeId, strRecordId, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetEmpDetail(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEmpDetailAsync(ByVal strEmployeeId As String, ByVal strRecordId As String, ByVal strAPP_ID As String)
            Me.GetEmpDetailAsync(strEmployeeId, strRecordId, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEmpDetailAsync(ByVal strEmployeeId As String, ByVal strRecordId As String, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.GetEmpDetailOperationCompleted Is Nothing) Then
                Me.GetEmpDetailOperationCompleted = AddressOf Me.OnGetEmpDetailOperationCompleted
            End If
            Me.InvokeAsync("GetEmpDetail", New Object() {strEmployeeId, strRecordId, strAPP_ID}, Me.GetEmpDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEmpDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEmpDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEmpDetailCompleted(Me, New GetEmpDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddNewEmpDetail", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddNewEmpDetail(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String) As String
            Dim results() As Object = Me.Invoke("AddNewEmpDetail", New Object() {adoDS, strAPP_ID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginAddNewEmpDetail(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AddNewEmpDetail", New Object() {adoDS, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAddNewEmpDetail(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddNewEmpDetailAsync(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String)
            Me.AddNewEmpDetailAsync(adoDS, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddNewEmpDetailAsync(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.AddNewEmpDetailOperationCompleted Is Nothing) Then
                Me.AddNewEmpDetailOperationCompleted = AddressOf Me.OnAddNewEmpDetailOperationCompleted
            End If
            Me.InvokeAsync("AddNewEmpDetail", New Object() {adoDS, strAPP_ID}, Me.AddNewEmpDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddNewEmpDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddNewEmpDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddNewEmpDetailCompleted(Me, New AddNewEmpDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateEmpDetail", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateEmpDetail(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String)
            Me.Invoke("UpdateEmpDetail", New Object() {adoDS, strAPP_ID})
        End Sub
        
        '''<remarks/>
        Public Function BeginUpdateEmpDetail(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateEmpDetail", New Object() {adoDS, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndUpdateEmpDetail(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateEmpDetailAsync(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String)
            Me.UpdateEmpDetailAsync(adoDS, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateEmpDetailAsync(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.UpdateEmpDetailOperationCompleted Is Nothing) Then
                Me.UpdateEmpDetailOperationCompleted = AddressOf Me.OnUpdateEmpDetailOperationCompleted
            End If
            Me.InvokeAsync("UpdateEmpDetail", New Object() {adoDS, strAPP_ID}, Me.UpdateEmpDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateEmpDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateEmpDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateEmpDetailCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteEmpDetail", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteEmpDetail(ByVal strEmpId As String, ByVal strRecId As String, ByVal strAPP_ID As String) As String
            Dim results() As Object = Me.Invoke("DeleteEmpDetail", New Object() {strEmpId, strRecId, strAPP_ID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginDeleteEmpDetail(ByVal strEmpId As String, ByVal strRecId As String, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeleteEmpDetail", New Object() {strEmpId, strRecId, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDeleteEmpDetail(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteEmpDetailAsync(ByVal strEmpId As String, ByVal strRecId As String, ByVal strAPP_ID As String)
            Me.DeleteEmpDetailAsync(strEmpId, strRecId, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteEmpDetailAsync(ByVal strEmpId As String, ByVal strRecId As String, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.DeleteEmpDetailOperationCompleted Is Nothing) Then
                Me.DeleteEmpDetailOperationCompleted = AddressOf Me.OnDeleteEmpDetailOperationCompleted
            End If
            Me.InvokeAsync("DeleteEmpDetail", New Object() {strEmpId, strRecId, strAPP_ID}, Me.DeleteEmpDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteEmpDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteEmpDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteEmpDetailCompleted(Me, New DeleteEmpDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLatestEMPPost", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLatestEMPPost(ByVal strEmployeeId As String, ByVal strAPP_ID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetLatestEMPPost", New Object() {strEmployeeId, strAPP_ID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetLatestEMPPost(ByVal strEmployeeId As String, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetLatestEMPPost", New Object() {strEmployeeId, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetLatestEMPPost(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLatestEMPPostAsync(ByVal strEmployeeId As String, ByVal strAPP_ID As String)
            Me.GetLatestEMPPostAsync(strEmployeeId, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLatestEMPPostAsync(ByVal strEmployeeId As String, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.GetLatestEMPPostOperationCompleted Is Nothing) Then
                Me.GetLatestEMPPostOperationCompleted = AddressOf Me.OnGetLatestEMPPostOperationCompleted
            End If
            Me.InvokeAsync("GetLatestEMPPost", New Object() {strEmployeeId, strAPP_ID}, Me.GetLatestEMPPostOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLatestEMPPostOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLatestEMPPostCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLatestEMPPostCompleted(Me, New GetLatestEMPPostCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRPTEmpPosition", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRPTEmpPosition(ByVal strEmployeeId As String, ByVal strHistory As String, ByVal strAPP_ID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetRPTEmpPosition", New Object() {strEmployeeId, strHistory, strAPP_ID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetRPTEmpPosition(ByVal strEmployeeId As String, ByVal strHistory As String, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetRPTEmpPosition", New Object() {strEmployeeId, strHistory, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetRPTEmpPosition(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRPTEmpPositionAsync(ByVal strEmployeeId As String, ByVal strHistory As String, ByVal strAPP_ID As String)
            Me.GetRPTEmpPositionAsync(strEmployeeId, strHistory, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRPTEmpPositionAsync(ByVal strEmployeeId As String, ByVal strHistory As String, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.GetRPTEmpPositionOperationCompleted Is Nothing) Then
                Me.GetRPTEmpPositionOperationCompleted = AddressOf Me.OnGetRPTEmpPositionOperationCompleted
            End If
            Me.InvokeAsync("GetRPTEmpPosition", New Object() {strEmployeeId, strHistory, strAPP_ID}, Me.GetRPTEmpPositionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRPTEmpPositionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRPTEmpPositionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRPTEmpPositionCompleted(Me, New GetRPTEmpPositionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteEMPPosition", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteEMPPosition(ByVal strEmployeeId As String, ByVal strPositionId As String, ByVal strAPP_ID As String)
            Me.Invoke("DeleteEMPPosition", New Object() {strEmployeeId, strPositionId, strAPP_ID})
        End Sub
        
        '''<remarks/>
        Public Function BeginDeleteEMPPosition(ByVal strEmployeeId As String, ByVal strPositionId As String, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeleteEMPPosition", New Object() {strEmployeeId, strPositionId, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndDeleteEMPPosition(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteEMPPositionAsync(ByVal strEmployeeId As String, ByVal strPositionId As String, ByVal strAPP_ID As String)
            Me.DeleteEMPPositionAsync(strEmployeeId, strPositionId, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteEMPPositionAsync(ByVal strEmployeeId As String, ByVal strPositionId As String, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.DeleteEMPPositionOperationCompleted Is Nothing) Then
                Me.DeleteEMPPositionOperationCompleted = AddressOf Me.OnDeleteEMPPositionOperationCompleted
            End If
            Me.InvokeAsync("DeleteEMPPosition", New Object() {strEmployeeId, strPositionId, strAPP_ID}, Me.DeleteEMPPositionOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteEMPPositionOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteEMPPositionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteEMPPositionCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateEMPPosition", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateEMPPosition(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String)
            Me.Invoke("UpdateEMPPosition", New Object() {adoDS, strAPP_ID})
        End Sub
        
        '''<remarks/>
        Public Function BeginUpdateEMPPosition(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateEMPPosition", New Object() {adoDS, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndUpdateEMPPosition(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateEMPPositionAsync(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String)
            Me.UpdateEMPPositionAsync(adoDS, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateEMPPositionAsync(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.UpdateEMPPositionOperationCompleted Is Nothing) Then
                Me.UpdateEMPPositionOperationCompleted = AddressOf Me.OnUpdateEMPPositionOperationCompleted
            End If
            Me.InvokeAsync("UpdateEMPPosition", New Object() {adoDS, strAPP_ID}, Me.UpdateEMPPositionOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateEMPPositionOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateEMPPositionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateEMPPositionCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddNewEMPPosition", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddNewEMPPosition(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String) As String
            Dim results() As Object = Me.Invoke("AddNewEMPPosition", New Object() {adoDS, strAPP_ID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginAddNewEMPPosition(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AddNewEMPPosition", New Object() {adoDS, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAddNewEMPPosition(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddNewEMPPositionAsync(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String)
            Me.AddNewEMPPositionAsync(adoDS, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddNewEMPPositionAsync(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.AddNewEMPPositionOperationCompleted Is Nothing) Then
                Me.AddNewEMPPositionOperationCompleted = AddressOf Me.OnAddNewEMPPositionOperationCompleted
            End If
            Me.InvokeAsync("AddNewEMPPosition", New Object() {adoDS, strAPP_ID}, Me.AddNewEMPPositionOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddNewEMPPositionOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddNewEMPPositionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddNewEMPPositionCompleted(Me, New AddNewEMPPositionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEMPPosition", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEMPPosition(ByVal strEmployeeId As String, ByVal strPositionId As String, ByVal strAPP_ID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetEMPPosition", New Object() {strEmployeeId, strPositionId, strAPP_ID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetEMPPosition(ByVal strEmployeeId As String, ByVal strPositionId As String, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetEMPPosition", New Object() {strEmployeeId, strPositionId, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetEMPPosition(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEMPPositionAsync(ByVal strEmployeeId As String, ByVal strPositionId As String, ByVal strAPP_ID As String)
            Me.GetEMPPositionAsync(strEmployeeId, strPositionId, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEMPPositionAsync(ByVal strEmployeeId As String, ByVal strPositionId As String, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.GetEMPPositionOperationCompleted Is Nothing) Then
                Me.GetEMPPositionOperationCompleted = AddressOf Me.OnGetEMPPositionOperationCompleted
            End If
            Me.InvokeAsync("GetEMPPosition", New Object() {strEmployeeId, strPositionId, strAPP_ID}, Me.GetEMPPositionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEMPPositionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEMPPositionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEMPPositionCompleted(Me, New GetEMPPositionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRPTEmpSalary", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRPTEmpSalary(ByVal strEmployeeId As String, ByVal strHistory As String, ByVal strAPP_ID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetRPTEmpSalary", New Object() {strEmployeeId, strHistory, strAPP_ID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetRPTEmpSalary(ByVal strEmployeeId As String, ByVal strHistory As String, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetRPTEmpSalary", New Object() {strEmployeeId, strHistory, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetRPTEmpSalary(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRPTEmpSalaryAsync(ByVal strEmployeeId As String, ByVal strHistory As String, ByVal strAPP_ID As String)
            Me.GetRPTEmpSalaryAsync(strEmployeeId, strHistory, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRPTEmpSalaryAsync(ByVal strEmployeeId As String, ByVal strHistory As String, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.GetRPTEmpSalaryOperationCompleted Is Nothing) Then
                Me.GetRPTEmpSalaryOperationCompleted = AddressOf Me.OnGetRPTEmpSalaryOperationCompleted
            End If
            Me.InvokeAsync("GetRPTEmpSalary", New Object() {strEmployeeId, strHistory, strAPP_ID}, Me.GetRPTEmpSalaryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRPTEmpSalaryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRPTEmpSalaryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRPTEmpSalaryCompleted(Me, New GetRPTEmpSalaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteEMPSalary", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteEMPSalary(ByVal strEmployeeId As String, ByVal strRecordId As String, ByVal strAPP_ID As String)
            Me.Invoke("DeleteEMPSalary", New Object() {strEmployeeId, strRecordId, strAPP_ID})
        End Sub
        
        '''<remarks/>
        Public Function BeginDeleteEMPSalary(ByVal strEmployeeId As String, ByVal strRecordId As String, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeleteEMPSalary", New Object() {strEmployeeId, strRecordId, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndDeleteEMPSalary(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteEMPSalaryAsync(ByVal strEmployeeId As String, ByVal strRecordId As String, ByVal strAPP_ID As String)
            Me.DeleteEMPSalaryAsync(strEmployeeId, strRecordId, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteEMPSalaryAsync(ByVal strEmployeeId As String, ByVal strRecordId As String, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.DeleteEMPSalaryOperationCompleted Is Nothing) Then
                Me.DeleteEMPSalaryOperationCompleted = AddressOf Me.OnDeleteEMPSalaryOperationCompleted
            End If
            Me.InvokeAsync("DeleteEMPSalary", New Object() {strEmployeeId, strRecordId, strAPP_ID}, Me.DeleteEMPSalaryOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteEMPSalaryOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteEMPSalaryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteEMPSalaryCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateEMPSalary", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateEMPSalary(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String)
            Me.Invoke("UpdateEMPSalary", New Object() {adoDS, strAPP_ID})
        End Sub
        
        '''<remarks/>
        Public Function BeginUpdateEMPSalary(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateEMPSalary", New Object() {adoDS, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndUpdateEMPSalary(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateEMPSalaryAsync(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String)
            Me.UpdateEMPSalaryAsync(adoDS, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateEMPSalaryAsync(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.UpdateEMPSalaryOperationCompleted Is Nothing) Then
                Me.UpdateEMPSalaryOperationCompleted = AddressOf Me.OnUpdateEMPSalaryOperationCompleted
            End If
            Me.InvokeAsync("UpdateEMPSalary", New Object() {adoDS, strAPP_ID}, Me.UpdateEMPSalaryOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateEMPSalaryOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateEMPSalaryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateEMPSalaryCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddNewEMPSalary", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddNewEMPSalary(ByVal adoDS As System.Data.DataSet, ByRef strRecord As String, ByVal strAPP_ID As String) As String
            Dim results() As Object = Me.Invoke("AddNewEMPSalary", New Object() {adoDS, strRecord, strAPP_ID})
            strRecord = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginAddNewEMPSalary(ByVal adoDS As System.Data.DataSet, ByVal strRecord As String, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AddNewEMPSalary", New Object() {adoDS, strRecord, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAddNewEMPSalary(ByVal asyncResult As System.IAsyncResult, ByRef strRecord As String) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            strRecord = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddNewEMPSalaryAsync(ByVal adoDS As System.Data.DataSet, ByVal strRecord As String, ByVal strAPP_ID As String)
            Me.AddNewEMPSalaryAsync(adoDS, strRecord, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddNewEMPSalaryAsync(ByVal adoDS As System.Data.DataSet, ByVal strRecord As String, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.AddNewEMPSalaryOperationCompleted Is Nothing) Then
                Me.AddNewEMPSalaryOperationCompleted = AddressOf Me.OnAddNewEMPSalaryOperationCompleted
            End If
            Me.InvokeAsync("AddNewEMPSalary", New Object() {adoDS, strRecord, strAPP_ID}, Me.AddNewEMPSalaryOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddNewEMPSalaryOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddNewEMPSalaryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddNewEMPSalaryCompleted(Me, New AddNewEMPSalaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEMPSalary", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEMPSalary(ByVal strEmployeeId As String, ByVal strRecordId As String, ByVal strAPP_ID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetEMPSalary", New Object() {strEmployeeId, strRecordId, strAPP_ID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetEMPSalary(ByVal strEmployeeId As String, ByVal strRecordId As String, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetEMPSalary", New Object() {strEmployeeId, strRecordId, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetEMPSalary(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEMPSalaryAsync(ByVal strEmployeeId As String, ByVal strRecordId As String, ByVal strAPP_ID As String)
            Me.GetEMPSalaryAsync(strEmployeeId, strRecordId, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEMPSalaryAsync(ByVal strEmployeeId As String, ByVal strRecordId As String, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.GetEMPSalaryOperationCompleted Is Nothing) Then
                Me.GetEMPSalaryOperationCompleted = AddressOf Me.OnGetEMPSalaryOperationCompleted
            End If
            Me.InvokeAsync("GetEMPSalary", New Object() {strEmployeeId, strRecordId, strAPP_ID}, Me.GetEMPSalaryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEMPSalaryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEMPSalaryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEMPSalaryCompleted(Me, New GetEMPSalaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLatestEMPSalary", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLatestEMPSalary(ByVal strEmployeeId As String, ByVal strAPP_ID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetLatestEMPSalary", New Object() {strEmployeeId, strAPP_ID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetLatestEMPSalary(ByVal strEmployeeId As String, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetLatestEMPSalary", New Object() {strEmployeeId, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetLatestEMPSalary(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLatestEMPSalaryAsync(ByVal strEmployeeId As String, ByVal strAPP_ID As String)
            Me.GetLatestEMPSalaryAsync(strEmployeeId, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLatestEMPSalaryAsync(ByVal strEmployeeId As String, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.GetLatestEMPSalaryOperationCompleted Is Nothing) Then
                Me.GetLatestEMPSalaryOperationCompleted = AddressOf Me.OnGetLatestEMPSalaryOperationCompleted
            End If
            Me.InvokeAsync("GetLatestEMPSalary", New Object() {strEmployeeId, strAPP_ID}, Me.GetLatestEMPSalaryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLatestEMPSalaryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLatestEMPSalaryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLatestEMPSalaryCompleted(Me, New GetLatestEMPSalaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteHRPosition", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteHRPosition(ByVal strPositionId As String, ByVal strAPP_ID As String)
            Me.Invoke("DeleteHRPosition", New Object() {strPositionId, strAPP_ID})
        End Sub
        
        '''<remarks/>
        Public Function BeginDeleteHRPosition(ByVal strPositionId As String, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeleteHRPosition", New Object() {strPositionId, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndDeleteHRPosition(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteHRPositionAsync(ByVal strPositionId As String, ByVal strAPP_ID As String)
            Me.DeleteHRPositionAsync(strPositionId, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteHRPositionAsync(ByVal strPositionId As String, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.DeleteHRPositionOperationCompleted Is Nothing) Then
                Me.DeleteHRPositionOperationCompleted = AddressOf Me.OnDeleteHRPositionOperationCompleted
            End If
            Me.InvokeAsync("DeleteHRPosition", New Object() {strPositionId, strAPP_ID}, Me.DeleteHRPositionOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteHRPositionOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteHRPositionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteHRPositionCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateHRPosition", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateHRPosition(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String)
            Me.Invoke("UpdateHRPosition", New Object() {adoDS, strAPP_ID})
        End Sub
        
        '''<remarks/>
        Public Function BeginUpdateHRPosition(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateHRPosition", New Object() {adoDS, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndUpdateHRPosition(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateHRPositionAsync(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String)
            Me.UpdateHRPositionAsync(adoDS, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateHRPositionAsync(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.UpdateHRPositionOperationCompleted Is Nothing) Then
                Me.UpdateHRPositionOperationCompleted = AddressOf Me.OnUpdateHRPositionOperationCompleted
            End If
            Me.InvokeAsync("UpdateHRPosition", New Object() {adoDS, strAPP_ID}, Me.UpdateHRPositionOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateHRPositionOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateHRPositionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateHRPositionCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddNewHRPosition", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddNewHRPosition(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String) As String
            Dim results() As Object = Me.Invoke("AddNewHRPosition", New Object() {adoDS, strAPP_ID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginAddNewHRPosition(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AddNewHRPosition", New Object() {adoDS, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAddNewHRPosition(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddNewHRPositionAsync(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String)
            Me.AddNewHRPositionAsync(adoDS, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddNewHRPositionAsync(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.AddNewHRPositionOperationCompleted Is Nothing) Then
                Me.AddNewHRPositionOperationCompleted = AddressOf Me.OnAddNewHRPositionOperationCompleted
            End If
            Me.InvokeAsync("AddNewHRPosition", New Object() {adoDS, strAPP_ID}, Me.AddNewHRPositionOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddNewHRPositionOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddNewHRPositionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddNewHRPositionCompleted(Me, New AddNewHRPositionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetHRPosition", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetHRPosition(ByVal strPositionId As String, ByVal strSuperiorId As String, ByVal strAPP_ID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetHRPosition", New Object() {strPositionId, strSuperiorId, strAPP_ID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetHRPosition(ByVal strPositionId As String, ByVal strSuperiorId As String, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetHRPosition", New Object() {strPositionId, strSuperiorId, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetHRPosition(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetHRPositionAsync(ByVal strPositionId As String, ByVal strSuperiorId As String, ByVal strAPP_ID As String)
            Me.GetHRPositionAsync(strPositionId, strSuperiorId, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetHRPositionAsync(ByVal strPositionId As String, ByVal strSuperiorId As String, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.GetHRPositionOperationCompleted Is Nothing) Then
                Me.GetHRPositionOperationCompleted = AddressOf Me.OnGetHRPositionOperationCompleted
            End If
            Me.InvokeAsync("GetHRPosition", New Object() {strPositionId, strSuperiorId, strAPP_ID}, Me.GetHRPositionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetHRPositionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetHRPositionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetHRPositionCompleted(Me, New GetHRPositionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRPTEmpNote", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRPTEmpNote(ByVal strEmployeeId As String, ByVal strHistory As String, ByVal strAPP_ID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetRPTEmpNote", New Object() {strEmployeeId, strHistory, strAPP_ID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetRPTEmpNote(ByVal strEmployeeId As String, ByVal strHistory As String, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetRPTEmpNote", New Object() {strEmployeeId, strHistory, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetRPTEmpNote(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRPTEmpNoteAsync(ByVal strEmployeeId As String, ByVal strHistory As String, ByVal strAPP_ID As String)
            Me.GetRPTEmpNoteAsync(strEmployeeId, strHistory, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRPTEmpNoteAsync(ByVal strEmployeeId As String, ByVal strHistory As String, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.GetRPTEmpNoteOperationCompleted Is Nothing) Then
                Me.GetRPTEmpNoteOperationCompleted = AddressOf Me.OnGetRPTEmpNoteOperationCompleted
            End If
            Me.InvokeAsync("GetRPTEmpNote", New Object() {strEmployeeId, strHistory, strAPP_ID}, Me.GetRPTEmpNoteOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRPTEmpNoteOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRPTEmpNoteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRPTEmpNoteCompleted(Me, New GetRPTEmpNoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteEMPNote", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteEMPNote(ByVal strEmployeeId As String, ByVal strRecordId As String, ByVal strAPP_ID As String)
            Me.Invoke("DeleteEMPNote", New Object() {strEmployeeId, strRecordId, strAPP_ID})
        End Sub
        
        '''<remarks/>
        Public Function BeginDeleteEMPNote(ByVal strEmployeeId As String, ByVal strRecordId As String, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeleteEMPNote", New Object() {strEmployeeId, strRecordId, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndDeleteEMPNote(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteEMPNoteAsync(ByVal strEmployeeId As String, ByVal strRecordId As String, ByVal strAPP_ID As String)
            Me.DeleteEMPNoteAsync(strEmployeeId, strRecordId, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteEMPNoteAsync(ByVal strEmployeeId As String, ByVal strRecordId As String, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.DeleteEMPNoteOperationCompleted Is Nothing) Then
                Me.DeleteEMPNoteOperationCompleted = AddressOf Me.OnDeleteEMPNoteOperationCompleted
            End If
            Me.InvokeAsync("DeleteEMPNote", New Object() {strEmployeeId, strRecordId, strAPP_ID}, Me.DeleteEMPNoteOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteEMPNoteOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteEMPNoteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteEMPNoteCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateEMPNote", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateEMPNote(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String)
            Me.Invoke("UpdateEMPNote", New Object() {adoDS, strAPP_ID})
        End Sub
        
        '''<remarks/>
        Public Function BeginUpdateEMPNote(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateEMPNote", New Object() {adoDS, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndUpdateEMPNote(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateEMPNoteAsync(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String)
            Me.UpdateEMPNoteAsync(adoDS, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateEMPNoteAsync(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.UpdateEMPNoteOperationCompleted Is Nothing) Then
                Me.UpdateEMPNoteOperationCompleted = AddressOf Me.OnUpdateEMPNoteOperationCompleted
            End If
            Me.InvokeAsync("UpdateEMPNote", New Object() {adoDS, strAPP_ID}, Me.UpdateEMPNoteOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateEMPNoteOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateEMPNoteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateEMPNoteCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddNewEMPNote", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub AddNewEMPNote(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String)
            Me.Invoke("AddNewEMPNote", New Object() {adoDS, strAPP_ID})
        End Sub
        
        '''<remarks/>
        Public Function BeginAddNewEMPNote(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AddNewEMPNote", New Object() {adoDS, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndAddNewEMPNote(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddNewEMPNoteAsync(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String)
            Me.AddNewEMPNoteAsync(adoDS, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddNewEMPNoteAsync(ByVal adoDS As System.Data.DataSet, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.AddNewEMPNoteOperationCompleted Is Nothing) Then
                Me.AddNewEMPNoteOperationCompleted = AddressOf Me.OnAddNewEMPNoteOperationCompleted
            End If
            Me.InvokeAsync("AddNewEMPNote", New Object() {adoDS, strAPP_ID}, Me.AddNewEMPNoteOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddNewEMPNoteOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddNewEMPNoteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddNewEMPNoteCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEMPNote", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEMPNote(ByVal strEmployeeId As String, ByVal strRecordId As String, ByVal strAPP_ID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetEMPNote", New Object() {strEmployeeId, strRecordId, strAPP_ID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetEMPNote(ByVal strEmployeeId As String, ByVal strRecordId As String, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetEMPNote", New Object() {strEmployeeId, strRecordId, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetEMPNote(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEMPNoteAsync(ByVal strEmployeeId As String, ByVal strRecordId As String, ByVal strAPP_ID As String)
            Me.GetEMPNoteAsync(strEmployeeId, strRecordId, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEMPNoteAsync(ByVal strEmployeeId As String, ByVal strRecordId As String, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.GetEMPNoteOperationCompleted Is Nothing) Then
                Me.GetEMPNoteOperationCompleted = AddressOf Me.OnGetEMPNoteOperationCompleted
            End If
            Me.InvokeAsync("GetEMPNote", New Object() {strEmployeeId, strRecordId, strAPP_ID}, Me.GetEMPNoteOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEMPNoteOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEMPNoteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEMPNoteCompleted(Me, New GetEMPNoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEMPNoteDate", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEMPNoteDate(ByVal strEmployeeId As String, ByVal dtDateInput As String, ByVal strAPP_ID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetEMPNoteDate", New Object() {strEmployeeId, dtDateInput, strAPP_ID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetEMPNoteDate(ByVal strEmployeeId As String, ByVal dtDateInput As String, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetEMPNoteDate", New Object() {strEmployeeId, dtDateInput, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetEMPNoteDate(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEMPNoteDateAsync(ByVal strEmployeeId As String, ByVal dtDateInput As String, ByVal strAPP_ID As String)
            Me.GetEMPNoteDateAsync(strEmployeeId, dtDateInput, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEMPNoteDateAsync(ByVal strEmployeeId As String, ByVal dtDateInput As String, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.GetEMPNoteDateOperationCompleted Is Nothing) Then
                Me.GetEMPNoteDateOperationCompleted = AddressOf Me.OnGetEMPNoteDateOperationCompleted
            End If
            Me.InvokeAsync("GetEMPNoteDate", New Object() {strEmployeeId, dtDateInput, strAPP_ID}, Me.GetEMPNoteDateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEMPNoteDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEMPNoteDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEMPNoteDateCompleted(Me, New GetEMPNoteDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLatestEMPNote", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLatestEMPNote(ByVal strEmployeeId As String, ByVal strAPP_ID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetLatestEMPNote", New Object() {strEmployeeId, strAPP_ID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetLatestEMPNote(ByVal strEmployeeId As String, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetLatestEMPNote", New Object() {strEmployeeId, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetLatestEMPNote(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLatestEMPNoteAsync(ByVal strEmployeeId As String, ByVal strAPP_ID As String)
            Me.GetLatestEMPNoteAsync(strEmployeeId, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLatestEMPNoteAsync(ByVal strEmployeeId As String, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.GetLatestEMPNoteOperationCompleted Is Nothing) Then
                Me.GetLatestEMPNoteOperationCompleted = AddressOf Me.OnGetLatestEMPNoteOperationCompleted
            End If
            Me.InvokeAsync("GetLatestEMPNote", New Object() {strEmployeeId, strAPP_ID}, Me.GetLatestEMPNoteOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLatestEMPNoteOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLatestEMPNoteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLatestEMPNoteCompleted(Me, New GetLatestEMPNoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetEmployeeNameCompletedEventHandler(ByVal sender As Object, ByVal e As GetEmployeeNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEmployeeNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetEmployeeInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetEmployeeInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEmployeeInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub AddNewEmployeeCompletedEventHandler(ByVal sender As Object, ByVal e As AddNewEmployeeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddNewEmployeeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub UpdateEmployeeInfoCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub DeleteEmployeeCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteEmployeeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteEmployeeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetRPTEmpDetailCompletedEventHandler(ByVal sender As Object, ByVal e As GetRPTEmpDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRPTEmpDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetLatestEMPDetailCompletedEventHandler(ByVal sender As Object, ByVal e As GetLatestEMPDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLatestEMPDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetLatestEMPPositionCompletedEventHandler(ByVal sender As Object, ByVal e As GetLatestEMPPositionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLatestEMPPositionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetEmpDetailCompletedEventHandler(ByVal sender As Object, ByVal e As GetEmpDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEmpDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub AddNewEmpDetailCompletedEventHandler(ByVal sender As Object, ByVal e As AddNewEmpDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddNewEmpDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub UpdateEmpDetailCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub DeleteEmpDetailCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteEmpDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteEmpDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetLatestEMPPostCompletedEventHandler(ByVal sender As Object, ByVal e As GetLatestEMPPostCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLatestEMPPostCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetRPTEmpPositionCompletedEventHandler(ByVal sender As Object, ByVal e As GetRPTEmpPositionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRPTEmpPositionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub DeleteEMPPositionCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub UpdateEMPPositionCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub AddNewEMPPositionCompletedEventHandler(ByVal sender As Object, ByVal e As AddNewEMPPositionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddNewEMPPositionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetEMPPositionCompletedEventHandler(ByVal sender As Object, ByVal e As GetEMPPositionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEMPPositionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetRPTEmpSalaryCompletedEventHandler(ByVal sender As Object, ByVal e As GetRPTEmpSalaryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRPTEmpSalaryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub DeleteEMPSalaryCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub UpdateEMPSalaryCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub AddNewEMPSalaryCompletedEventHandler(ByVal sender As Object, ByVal e As AddNewEMPSalaryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddNewEMPSalaryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRecord() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetEMPSalaryCompletedEventHandler(ByVal sender As Object, ByVal e As GetEMPSalaryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEMPSalaryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetLatestEMPSalaryCompletedEventHandler(ByVal sender As Object, ByVal e As GetLatestEMPSalaryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLatestEMPSalaryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub DeleteHRPositionCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub UpdateHRPositionCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub AddNewHRPositionCompletedEventHandler(ByVal sender As Object, ByVal e As AddNewHRPositionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddNewHRPositionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetHRPositionCompletedEventHandler(ByVal sender As Object, ByVal e As GetHRPositionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetHRPositionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetRPTEmpNoteCompletedEventHandler(ByVal sender As Object, ByVal e As GetRPTEmpNoteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRPTEmpNoteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub DeleteEMPNoteCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub UpdateEMPNoteCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub AddNewEMPNoteCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetEMPNoteCompletedEventHandler(ByVal sender As Object, ByVal e As GetEMPNoteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEMPNoteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetEMPNoteDateCompletedEventHandler(ByVal sender As Object, ByVal e As GetEMPNoteDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEMPNoteDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetLatestEMPNoteCompletedEventHandler(ByVal sender As Object, ByVal e As GetLatestEMPNoteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLatestEMPNoteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
End Namespace
