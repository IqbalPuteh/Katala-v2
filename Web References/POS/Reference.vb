'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace POS
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="svcPOSSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class svcPOS
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private AddNewTransactionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetItemDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetHeaderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTransHeaderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTransDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSumSalesPerMonthOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSumSalesPerDaysOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSumSalesPerHoursOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSumFreqPerDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReturnItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReturnItemDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckItemStockOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddNewReturnOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateReturnOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetItemSalesPerPeriodOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetItemSalesPerDayOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetItemSalesPerDayWithTaxOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = "http://localhost/KatalaWebServices/svcPOS.asmx"
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event AddNewTransactionCompleted As AddNewTransactionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDateCompleted As GetDateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetItemDataCompleted As GetItemDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetHeaderCompleted As GetHeaderCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTransHeaderCompleted As GetTransHeaderCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTransDetailCompleted As GetTransDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSumSalesPerMonthCompleted As GetSumSalesPerMonthCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSumSalesPerDaysCompleted As GetSumSalesPerDaysCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSumSalesPerHoursCompleted As GetSumSalesPerHoursCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSumFreqPerDateCompleted As GetSumFreqPerDateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReturnItemCompleted As GetReturnItemCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReturnItemDataCompleted As GetReturnItemDataCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckItemStockCompleted As CheckItemStockCompletedEventHandler
        
        '''<remarks/>
        Public Event AddNewReturnCompleted As AddNewReturnCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateReturnCompleted As UpdateReturnCompletedEventHandler
        
        '''<remarks/>
        Public Event GetItemSalesPerPeriodCompleted As GetItemSalesPerPeriodCompletedEventHandler
        
        '''<remarks/>
        Public Event GetItemSalesPerDayCompleted As GetItemSalesPerDayCompletedEventHandler
        
        '''<remarks/>
        Public Event GetItemSalesPerDayWithTaxCompleted As GetItemSalesPerDayWithTaxCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddNewTransaction", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddNewTransaction(ByVal adoDSHeader As System.Data.DataSet, ByVal adoDSDetail As System.Data.DataSet, ByVal strAPP_ID As String) As String
            Dim results() As Object = Me.Invoke("AddNewTransaction", New Object() {adoDSHeader, adoDSDetail, strAPP_ID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginAddNewTransaction(ByVal adoDSHeader As System.Data.DataSet, ByVal adoDSDetail As System.Data.DataSet, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AddNewTransaction", New Object() {adoDSHeader, adoDSDetail, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAddNewTransaction(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddNewTransactionAsync(ByVal adoDSHeader As System.Data.DataSet, ByVal adoDSDetail As System.Data.DataSet, ByVal strAPP_ID As String)
            Me.AddNewTransactionAsync(adoDSHeader, adoDSDetail, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddNewTransactionAsync(ByVal adoDSHeader As System.Data.DataSet, ByVal adoDSDetail As System.Data.DataSet, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.AddNewTransactionOperationCompleted Is Nothing) Then
                Me.AddNewTransactionOperationCompleted = AddressOf Me.OnAddNewTransactionOperationCompleted
            End If
            Me.InvokeAsync("AddNewTransaction", New Object() {adoDSHeader, adoDSDetail, strAPP_ID}, Me.AddNewTransactionOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddNewTransactionOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddNewTransactionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddNewTransactionCompleted(Me, New AddNewTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDate", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDate(ByVal strAPP_ID As String) As Date
            Dim results() As Object = Me.Invoke("GetDate", New Object() {strAPP_ID})
            Return CType(results(0),Date)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDate(ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDate", New Object() {strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDate(ByVal asyncResult As System.IAsyncResult) As Date
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Date)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDateAsync(ByVal strAPP_ID As String)
            Me.GetDateAsync(strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDateAsync(ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.GetDateOperationCompleted Is Nothing) Then
                Me.GetDateOperationCompleted = AddressOf Me.OnGetDateOperationCompleted
            End If
            Me.InvokeAsync("GetDate", New Object() {strAPP_ID}, Me.GetDateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDateCompleted(Me, New GetDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetItemData", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetItemData(ByVal strItemNo As String, ByVal strAPP_ID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetItemData", New Object() {strItemNo, strAPP_ID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetItemData(ByVal strItemNo As String, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetItemData", New Object() {strItemNo, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetItemData(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetItemDataAsync(ByVal strItemNo As String, ByVal strAPP_ID As String)
            Me.GetItemDataAsync(strItemNo, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetItemDataAsync(ByVal strItemNo As String, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.GetItemDataOperationCompleted Is Nothing) Then
                Me.GetItemDataOperationCompleted = AddressOf Me.OnGetItemDataOperationCompleted
            End If
            Me.InvokeAsync("GetItemData", New Object() {strItemNo, strAPP_ID}, Me.GetItemDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetItemDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetItemDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetItemDataCompleted(Me, New GetItemDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetHeader", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetHeader(ByVal strStart As String, ByVal strEnd As String, ByVal strMembershipNo As String, ByVal strVoucherNo As String, ByVal strAPP_ID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetHeader", New Object() {strStart, strEnd, strMembershipNo, strVoucherNo, strAPP_ID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetHeader(ByVal strStart As String, ByVal strEnd As String, ByVal strMembershipNo As String, ByVal strVoucherNo As String, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetHeader", New Object() {strStart, strEnd, strMembershipNo, strVoucherNo, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetHeader(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetHeaderAsync(ByVal strStart As String, ByVal strEnd As String, ByVal strMembershipNo As String, ByVal strVoucherNo As String, ByVal strAPP_ID As String)
            Me.GetHeaderAsync(strStart, strEnd, strMembershipNo, strVoucherNo, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetHeaderAsync(ByVal strStart As String, ByVal strEnd As String, ByVal strMembershipNo As String, ByVal strVoucherNo As String, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.GetHeaderOperationCompleted Is Nothing) Then
                Me.GetHeaderOperationCompleted = AddressOf Me.OnGetHeaderOperationCompleted
            End If
            Me.InvokeAsync("GetHeader", New Object() {strStart, strEnd, strMembershipNo, strVoucherNo, strAPP_ID}, Me.GetHeaderOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetHeaderOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetHeaderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetHeaderCompleted(Me, New GetHeaderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTransHeader", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTransHeader(ByVal strTransId As String, ByVal strAPP_ID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetTransHeader", New Object() {strTransId, strAPP_ID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetTransHeader(ByVal strTransId As String, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetTransHeader", New Object() {strTransId, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetTransHeader(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTransHeaderAsync(ByVal strTransId As String, ByVal strAPP_ID As String)
            Me.GetTransHeaderAsync(strTransId, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTransHeaderAsync(ByVal strTransId As String, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.GetTransHeaderOperationCompleted Is Nothing) Then
                Me.GetTransHeaderOperationCompleted = AddressOf Me.OnGetTransHeaderOperationCompleted
            End If
            Me.InvokeAsync("GetTransHeader", New Object() {strTransId, strAPP_ID}, Me.GetTransHeaderOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTransHeaderOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTransHeaderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTransHeaderCompleted(Me, New GetTransHeaderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTransDetail", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTransDetail(ByVal strTransId As String, ByVal strAPP_ID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetTransDetail", New Object() {strTransId, strAPP_ID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetTransDetail(ByVal strTransId As String, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetTransDetail", New Object() {strTransId, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetTransDetail(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTransDetailAsync(ByVal strTransId As String, ByVal strAPP_ID As String)
            Me.GetTransDetailAsync(strTransId, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTransDetailAsync(ByVal strTransId As String, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.GetTransDetailOperationCompleted Is Nothing) Then
                Me.GetTransDetailOperationCompleted = AddressOf Me.OnGetTransDetailOperationCompleted
            End If
            Me.InvokeAsync("GetTransDetail", New Object() {strTransId, strAPP_ID}, Me.GetTransDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTransDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTransDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTransDetailCompleted(Me, New GetTransDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSumSalesPerMonth", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSumSalesPerMonth(ByVal strMonth01 As String, ByVal strMonth02 As String, ByVal strAPP_ID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSumSalesPerMonth", New Object() {strMonth01, strMonth02, strAPP_ID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetSumSalesPerMonth(ByVal strMonth01 As String, ByVal strMonth02 As String, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetSumSalesPerMonth", New Object() {strMonth01, strMonth02, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetSumSalesPerMonth(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSumSalesPerMonthAsync(ByVal strMonth01 As String, ByVal strMonth02 As String, ByVal strAPP_ID As String)
            Me.GetSumSalesPerMonthAsync(strMonth01, strMonth02, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSumSalesPerMonthAsync(ByVal strMonth01 As String, ByVal strMonth02 As String, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.GetSumSalesPerMonthOperationCompleted Is Nothing) Then
                Me.GetSumSalesPerMonthOperationCompleted = AddressOf Me.OnGetSumSalesPerMonthOperationCompleted
            End If
            Me.InvokeAsync("GetSumSalesPerMonth", New Object() {strMonth01, strMonth02, strAPP_ID}, Me.GetSumSalesPerMonthOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSumSalesPerMonthOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSumSalesPerMonthCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSumSalesPerMonthCompleted(Me, New GetSumSalesPerMonthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSumSalesPerDays", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSumSalesPerDays(ByVal strDate01 As String, ByVal strDate02 As String, ByVal strAPP_ID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSumSalesPerDays", New Object() {strDate01, strDate02, strAPP_ID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetSumSalesPerDays(ByVal strDate01 As String, ByVal strDate02 As String, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetSumSalesPerDays", New Object() {strDate01, strDate02, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetSumSalesPerDays(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSumSalesPerDaysAsync(ByVal strDate01 As String, ByVal strDate02 As String, ByVal strAPP_ID As String)
            Me.GetSumSalesPerDaysAsync(strDate01, strDate02, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSumSalesPerDaysAsync(ByVal strDate01 As String, ByVal strDate02 As String, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.GetSumSalesPerDaysOperationCompleted Is Nothing) Then
                Me.GetSumSalesPerDaysOperationCompleted = AddressOf Me.OnGetSumSalesPerDaysOperationCompleted
            End If
            Me.InvokeAsync("GetSumSalesPerDays", New Object() {strDate01, strDate02, strAPP_ID}, Me.GetSumSalesPerDaysOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSumSalesPerDaysOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSumSalesPerDaysCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSumSalesPerDaysCompleted(Me, New GetSumSalesPerDaysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSumSalesPerHours", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSumSalesPerHours(ByVal strDate01 As String, ByVal strDate02 As String, ByVal strHour01 As String, ByVal strHour02 As String, ByVal strAPP_ID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSumSalesPerHours", New Object() {strDate01, strDate02, strHour01, strHour02, strAPP_ID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetSumSalesPerHours(ByVal strDate01 As String, ByVal strDate02 As String, ByVal strHour01 As String, ByVal strHour02 As String, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetSumSalesPerHours", New Object() {strDate01, strDate02, strHour01, strHour02, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetSumSalesPerHours(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSumSalesPerHoursAsync(ByVal strDate01 As String, ByVal strDate02 As String, ByVal strHour01 As String, ByVal strHour02 As String, ByVal strAPP_ID As String)
            Me.GetSumSalesPerHoursAsync(strDate01, strDate02, strHour01, strHour02, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSumSalesPerHoursAsync(ByVal strDate01 As String, ByVal strDate02 As String, ByVal strHour01 As String, ByVal strHour02 As String, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.GetSumSalesPerHoursOperationCompleted Is Nothing) Then
                Me.GetSumSalesPerHoursOperationCompleted = AddressOf Me.OnGetSumSalesPerHoursOperationCompleted
            End If
            Me.InvokeAsync("GetSumSalesPerHours", New Object() {strDate01, strDate02, strHour01, strHour02, strAPP_ID}, Me.GetSumSalesPerHoursOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSumSalesPerHoursOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSumSalesPerHoursCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSumSalesPerHoursCompleted(Me, New GetSumSalesPerHoursCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSumFreqPerDate", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSumFreqPerDate(ByVal strDate01 As String, ByVal strDate02 As String, ByVal strAPP_ID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSumFreqPerDate", New Object() {strDate01, strDate02, strAPP_ID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetSumFreqPerDate(ByVal strDate01 As String, ByVal strDate02 As String, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetSumFreqPerDate", New Object() {strDate01, strDate02, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetSumFreqPerDate(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSumFreqPerDateAsync(ByVal strDate01 As String, ByVal strDate02 As String, ByVal strAPP_ID As String)
            Me.GetSumFreqPerDateAsync(strDate01, strDate02, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSumFreqPerDateAsync(ByVal strDate01 As String, ByVal strDate02 As String, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.GetSumFreqPerDateOperationCompleted Is Nothing) Then
                Me.GetSumFreqPerDateOperationCompleted = AddressOf Me.OnGetSumFreqPerDateOperationCompleted
            End If
            Me.InvokeAsync("GetSumFreqPerDate", New Object() {strDate01, strDate02, strAPP_ID}, Me.GetSumFreqPerDateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSumFreqPerDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSumFreqPerDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSumFreqPerDateCompleted(Me, New GetSumFreqPerDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetReturnItem", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReturnItem(ByVal strStart As String, ByVal strEnd As String, ByVal strItemNo As String, ByVal strAPP_ID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetReturnItem", New Object() {strStart, strEnd, strItemNo, strAPP_ID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetReturnItem(ByVal strStart As String, ByVal strEnd As String, ByVal strItemNo As String, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetReturnItem", New Object() {strStart, strEnd, strItemNo, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetReturnItem(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReturnItemAsync(ByVal strStart As String, ByVal strEnd As String, ByVal strItemNo As String, ByVal strAPP_ID As String)
            Me.GetReturnItemAsync(strStart, strEnd, strItemNo, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReturnItemAsync(ByVal strStart As String, ByVal strEnd As String, ByVal strItemNo As String, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.GetReturnItemOperationCompleted Is Nothing) Then
                Me.GetReturnItemOperationCompleted = AddressOf Me.OnGetReturnItemOperationCompleted
            End If
            Me.InvokeAsync("GetReturnItem", New Object() {strStart, strEnd, strItemNo, strAPP_ID}, Me.GetReturnItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReturnItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReturnItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReturnItemCompleted(Me, New GetReturnItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetReturnItemData", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReturnItemData(ByVal strReturnId As String, ByVal strAPP_ID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetReturnItemData", New Object() {strReturnId, strAPP_ID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetReturnItemData(ByVal strReturnId As String, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetReturnItemData", New Object() {strReturnId, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetReturnItemData(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReturnItemDataAsync(ByVal strReturnId As String, ByVal strAPP_ID As String)
            Me.GetReturnItemDataAsync(strReturnId, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReturnItemDataAsync(ByVal strReturnId As String, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.GetReturnItemDataOperationCompleted Is Nothing) Then
                Me.GetReturnItemDataOperationCompleted = AddressOf Me.OnGetReturnItemDataOperationCompleted
            End If
            Me.InvokeAsync("GetReturnItemData", New Object() {strReturnId, strAPP_ID}, Me.GetReturnItemDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReturnItemDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReturnItemDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReturnItemDataCompleted(Me, New GetReturnItemDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckItemStock", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckItemStock(ByVal strItemNo As String, ByVal strAPP_ID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CheckItemStock", New Object() {strItemNo, strAPP_ID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginCheckItemStock(ByVal strItemNo As String, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CheckItemStock", New Object() {strItemNo, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCheckItemStock(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckItemStockAsync(ByVal strItemNo As String, ByVal strAPP_ID As String)
            Me.CheckItemStockAsync(strItemNo, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckItemStockAsync(ByVal strItemNo As String, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.CheckItemStockOperationCompleted Is Nothing) Then
                Me.CheckItemStockOperationCompleted = AddressOf Me.OnCheckItemStockOperationCompleted
            End If
            Me.InvokeAsync("CheckItemStock", New Object() {strItemNo, strAPP_ID}, Me.CheckItemStockOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckItemStockOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckItemStockCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckItemStockCompleted(Me, New CheckItemStockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddNewReturn", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddNewReturn(ByVal adoDSReturn As System.Data.DataSet, ByVal strAPP_ID As String) As String
            Dim results() As Object = Me.Invoke("AddNewReturn", New Object() {adoDSReturn, strAPP_ID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginAddNewReturn(ByVal adoDSReturn As System.Data.DataSet, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AddNewReturn", New Object() {adoDSReturn, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAddNewReturn(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddNewReturnAsync(ByVal adoDSReturn As System.Data.DataSet, ByVal strAPP_ID As String)
            Me.AddNewReturnAsync(adoDSReturn, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddNewReturnAsync(ByVal adoDSReturn As System.Data.DataSet, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.AddNewReturnOperationCompleted Is Nothing) Then
                Me.AddNewReturnOperationCompleted = AddressOf Me.OnAddNewReturnOperationCompleted
            End If
            Me.InvokeAsync("AddNewReturn", New Object() {adoDSReturn, strAPP_ID}, Me.AddNewReturnOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddNewReturnOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddNewReturnCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddNewReturnCompleted(Me, New AddNewReturnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateReturn", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateReturn(ByVal adoDSReturn As System.Data.DataSet, ByVal strAPP_ID As String)
            Me.Invoke("UpdateReturn", New Object() {adoDSReturn, strAPP_ID})
        End Sub
        
        '''<remarks/>
        Public Function BeginUpdateReturn(ByVal adoDSReturn As System.Data.DataSet, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateReturn", New Object() {adoDSReturn, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndUpdateReturn(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateReturnAsync(ByVal adoDSReturn As System.Data.DataSet, ByVal strAPP_ID As String)
            Me.UpdateReturnAsync(adoDSReturn, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateReturnAsync(ByVal adoDSReturn As System.Data.DataSet, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.UpdateReturnOperationCompleted Is Nothing) Then
                Me.UpdateReturnOperationCompleted = AddressOf Me.OnUpdateReturnOperationCompleted
            End If
            Me.InvokeAsync("UpdateReturn", New Object() {adoDSReturn, strAPP_ID}, Me.UpdateReturnOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateReturnOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateReturnCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateReturnCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetItemSalesPerPeriod", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetItemSalesPerPeriod(ByVal strItemNo As String, ByVal dtFrom As Date, ByVal dtUntil As Date, ByVal strFilterBy As String, ByVal strAPP_ID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetItemSalesPerPeriod", New Object() {strItemNo, dtFrom, dtUntil, strFilterBy, strAPP_ID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetItemSalesPerPeriod(ByVal strItemNo As String, ByVal dtFrom As Date, ByVal dtUntil As Date, ByVal strFilterBy As String, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetItemSalesPerPeriod", New Object() {strItemNo, dtFrom, dtUntil, strFilterBy, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetItemSalesPerPeriod(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetItemSalesPerPeriodAsync(ByVal strItemNo As String, ByVal dtFrom As Date, ByVal dtUntil As Date, ByVal strFilterBy As String, ByVal strAPP_ID As String)
            Me.GetItemSalesPerPeriodAsync(strItemNo, dtFrom, dtUntil, strFilterBy, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetItemSalesPerPeriodAsync(ByVal strItemNo As String, ByVal dtFrom As Date, ByVal dtUntil As Date, ByVal strFilterBy As String, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.GetItemSalesPerPeriodOperationCompleted Is Nothing) Then
                Me.GetItemSalesPerPeriodOperationCompleted = AddressOf Me.OnGetItemSalesPerPeriodOperationCompleted
            End If
            Me.InvokeAsync("GetItemSalesPerPeriod", New Object() {strItemNo, dtFrom, dtUntil, strFilterBy, strAPP_ID}, Me.GetItemSalesPerPeriodOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetItemSalesPerPeriodOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetItemSalesPerPeriodCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetItemSalesPerPeriodCompleted(Me, New GetItemSalesPerPeriodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetItemSalesPerDay", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetItemSalesPerDay(ByVal strItemNo As String, ByVal dtDate As Date, ByVal strFilterBy As String, ByVal strAPP_ID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetItemSalesPerDay", New Object() {strItemNo, dtDate, strFilterBy, strAPP_ID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetItemSalesPerDay(ByVal strItemNo As String, ByVal dtDate As Date, ByVal strFilterBy As String, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetItemSalesPerDay", New Object() {strItemNo, dtDate, strFilterBy, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetItemSalesPerDay(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetItemSalesPerDayAsync(ByVal strItemNo As String, ByVal dtDate As Date, ByVal strFilterBy As String, ByVal strAPP_ID As String)
            Me.GetItemSalesPerDayAsync(strItemNo, dtDate, strFilterBy, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetItemSalesPerDayAsync(ByVal strItemNo As String, ByVal dtDate As Date, ByVal strFilterBy As String, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.GetItemSalesPerDayOperationCompleted Is Nothing) Then
                Me.GetItemSalesPerDayOperationCompleted = AddressOf Me.OnGetItemSalesPerDayOperationCompleted
            End If
            Me.InvokeAsync("GetItemSalesPerDay", New Object() {strItemNo, dtDate, strFilterBy, strAPP_ID}, Me.GetItemSalesPerDayOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetItemSalesPerDayOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetItemSalesPerDayCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetItemSalesPerDayCompleted(Me, New GetItemSalesPerDayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetItemSalesPerDayWithTax", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetItemSalesPerDayWithTax(ByVal strItemNo As String, ByVal dtDate As Date, ByVal strFilterBy As String, ByVal strAPP_ID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetItemSalesPerDayWithTax", New Object() {strItemNo, dtDate, strFilterBy, strAPP_ID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetItemSalesPerDayWithTax(ByVal strItemNo As String, ByVal dtDate As Date, ByVal strFilterBy As String, ByVal strAPP_ID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetItemSalesPerDayWithTax", New Object() {strItemNo, dtDate, strFilterBy, strAPP_ID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetItemSalesPerDayWithTax(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetItemSalesPerDayWithTaxAsync(ByVal strItemNo As String, ByVal dtDate As Date, ByVal strFilterBy As String, ByVal strAPP_ID As String)
            Me.GetItemSalesPerDayWithTaxAsync(strItemNo, dtDate, strFilterBy, strAPP_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetItemSalesPerDayWithTaxAsync(ByVal strItemNo As String, ByVal dtDate As Date, ByVal strFilterBy As String, ByVal strAPP_ID As String, ByVal userState As Object)
            If (Me.GetItemSalesPerDayWithTaxOperationCompleted Is Nothing) Then
                Me.GetItemSalesPerDayWithTaxOperationCompleted = AddressOf Me.OnGetItemSalesPerDayWithTaxOperationCompleted
            End If
            Me.InvokeAsync("GetItemSalesPerDayWithTax", New Object() {strItemNo, dtDate, strFilterBy, strAPP_ID}, Me.GetItemSalesPerDayWithTaxOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetItemSalesPerDayWithTaxOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetItemSalesPerDayWithTaxCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetItemSalesPerDayWithTaxCompleted(Me, New GetItemSalesPerDayWithTaxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub AddNewTransactionCompletedEventHandler(ByVal sender As Object, ByVal e As AddNewTransactionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddNewTransactionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetDateCompletedEventHandler(ByVal sender As Object, ByVal e As GetDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Date
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Date)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetItemDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetItemDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetItemDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetHeaderCompletedEventHandler(ByVal sender As Object, ByVal e As GetHeaderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetHeaderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetTransHeaderCompletedEventHandler(ByVal sender As Object, ByVal e As GetTransHeaderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTransHeaderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetTransDetailCompletedEventHandler(ByVal sender As Object, ByVal e As GetTransDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTransDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetSumSalesPerMonthCompletedEventHandler(ByVal sender As Object, ByVal e As GetSumSalesPerMonthCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSumSalesPerMonthCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetSumSalesPerDaysCompletedEventHandler(ByVal sender As Object, ByVal e As GetSumSalesPerDaysCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSumSalesPerDaysCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetSumSalesPerHoursCompletedEventHandler(ByVal sender As Object, ByVal e As GetSumSalesPerHoursCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSumSalesPerHoursCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetSumFreqPerDateCompletedEventHandler(ByVal sender As Object, ByVal e As GetSumFreqPerDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSumFreqPerDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetReturnItemCompletedEventHandler(ByVal sender As Object, ByVal e As GetReturnItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReturnItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetReturnItemDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetReturnItemDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReturnItemDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub CheckItemStockCompletedEventHandler(ByVal sender As Object, ByVal e As CheckItemStockCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckItemStockCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub AddNewReturnCompletedEventHandler(ByVal sender As Object, ByVal e As AddNewReturnCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddNewReturnCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub UpdateReturnCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetItemSalesPerPeriodCompletedEventHandler(ByVal sender As Object, ByVal e As GetItemSalesPerPeriodCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetItemSalesPerPeriodCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetItemSalesPerDayCompletedEventHandler(ByVal sender As Object, ByVal e As GetItemSalesPerDayCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetItemSalesPerDayCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub GetItemSalesPerDayWithTaxCompletedEventHandler(ByVal sender As Object, ByVal e As GetItemSalesPerDayWithTaxCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetItemSalesPerDayWithTaxCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
End Namespace
